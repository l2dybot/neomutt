From 3b3186c2ce58a5bf56af60ce3f122f2955274eac Mon Sep 17 00:00:00 2001
From: Kevin McCarthy <kevin@8t8.us>
Date: Thu, 30 Jan 2020 15:06:36 -0800
Subject: Add send_ctx to compose menu and get_postponed()

This will be used to store and use sctx for sign_as values.

Upstream-commit: https://gitlab.com/muttmua/mutt/commit/3b3186c2ce58a5bf56af60ce3f122f2955274eac
Co-authored-by: Richard Russon <rich@flatcap.org>
---
 compose.c  | 28 +++++++++++++--------------
 mutt.h     |  4 +---
 postpone.c | 55 +++++++++++++++++++++++++-----------------------------
 protos.h   |  4 ++--
 send.c     | 18 ++++++++----------
 send.h     |  1 +
 6 files changed, 51 insertions(+), 59 deletions(-)

diff --git a/compose.c b/compose.c
index db745df7..60f7528b 100644
--- a/compose.c
+++ b/compose.c
@@ -1010,11 +1010,9 @@ static void compose_menu_redraw(struct Menu *menu)
  * 0        normal exit
  * -1        abort message
  */
-int mutt_compose_menu(struct Email *msg,   /* structure for new message */
-                       struct Buffer *fcc,     /* where to save a copy of the message */
-                       struct Email *cur,   /* current message */
-                       int flags)
+int mutt_compose_menu(SEND_CONTEXT *sctx)
 {
+  struct Email *msg;   /* structure for new message */
   char helpstr[1024];
   char buf[1024];
   struct Buffer *fname = NULL;
@@ -1032,10 +1030,12 @@ int mutt_compose_menu(struct Email *msg,   /* structure for new message */
   struct stat st;
   struct ComposeRedrawData rd = {0};
 
+  msg = sctx->msg;
+
   init_header_padding();
 
   rd.msg = msg;
-  rd.fcc = fcc;
+  rd.fcc = sctx->fcc;
 
   menu = mutt_menu_new(MENU_COMPOSE);
   menu->offset = HDR_ATTACH;
@@ -1101,13 +1101,13 @@ int mutt_compose_menu(struct Email *msg,   /* structure for new message */
         mutt_message_hook(NULL, msg, MUTT_SEND2_HOOK);
         break;
       case OP_COMPOSE_EDIT_FCC:
-        mutt_buffer_strcpy(fname, mutt_b2s(fcc));
+        mutt_buffer_strcpy(fname, mutt_b2s(sctx->fcc));
         if (mutt_buffer_get_field(_("Fcc: "), fname, MUTT_FILE | MUTT_CLEAR) == 0)
         {
-          mutt_buffer_strcpy(fcc, mutt_b2s(fname));
-          mutt_buffer_pretty_mailbox(fcc);
+          mutt_buffer_strcpy(sctx->fcc, mutt_b2s(fname));
+          mutt_buffer_pretty_mailbox(sctx->fcc);
           mutt_window_move(MuttIndexWindow, HDR_FCC, HDR_XOFFSET);
-          mutt_paddstr(W, mutt_b2s(fcc));
+          mutt_paddstr(W, mutt_b2s(sctx->fcc));
           fcc_set = 1;
         }
         mutt_message_hook(NULL, msg, MUTT_SEND2_HOOK);
@@ -1134,7 +1134,7 @@ int mutt_compose_menu(struct Email *msg,   /* structure for new message */
           char *tag = NULL, *err = NULL;
           mutt_env_to_local(msg->env);
           mutt_edit_headers(NONULL(C_Editor), msg->content->filename, msg,
-                             fcc);
+                             sctx->fcc);
           if (mutt_env_to_intl(msg->env, &tag, &err))
           {
             mutt_error(_("Bad IDN in \"%s\": '%s'"), tag, err);
@@ -1148,7 +1148,7 @@ int mutt_compose_menu(struct Email *msg,   /* structure for new message */
              attachment list could change if the user invokes ~v to edit
              the message with headers, in which we need to execute the
              code below to regenerate the index array */
-          mutt_builtin_editor(msg->content->filename, msg, cur);
+          mutt_builtin_editor(msg->content->filename, msg, sctx->cur);
         }
 
         mutt_rfc3676_space_stuff(msg);
@@ -1466,13 +1466,13 @@ int mutt_compose_menu(struct Email *msg,   /* structure for new message */
           break;
 #endif
 
-        if (!fcc_set && mutt_buffer_len(fcc))
+        if (!fcc_set && mutt_buffer_len(sctx->fcc))
         {
           if ((i = query_quadoption(C_Copy,
                                      _("Save a copy of this message?"))) == -1)
             break;
           else if (i == MUTT_NO)
-            mutt_buffer_clear(fcc);
+            mutt_buffer_clear(sctx->fcc);
         }
 
         loop = 0;
@@ -1709,7 +1709,7 @@ int mutt_compose_menu(struct Email *msg,   /* structure for new message */
             if (actx->idx[i]->unowned)
               actx->idx[i]->content->unlink = 0;
 
-          if (!(flags & MUTT_COMPOSE_NOFREEHEADER))
+          if (!(sctx->flags & SEND_NO_FREE_HEADER))
           {
             for (i = 0; i < actx->idxlen; i++)
             {
diff --git a/mutt.h b/mutt.h
index 9e231e29..e7519cef 100644
--- a/mutt.h
+++ b/mutt.h
@@ -358,9 +358,6 @@ enum
 #define SENDTOSENDER           (1<<12)
 #define SENDGROUPCHATREPLY     (1<<13)
 
-/* flags for mutt_compose_menu() */
-#define MUTT_COMPOSE_NOFREEHEADER(1<<0)
-
 /* flags to _mutt_select_file() */
 #define MUTT_SEL_MAILBOX (1<<0)
 #define MUTT_SEL_MULTI (1<<1)
@@ -1170,6 +1167,7 @@ typedef struct
 
 #define MUTT_PARTS_TOPLEVEL       (1<<0)        /* is the top-level part */
 
+#include "send.h"
 #include "ascii.h"
 #include "protos.h"
 #include "lib.h"
diff --git a/postpone.c b/postpone.c
index d23106c7..f5d89517 100644
--- a/postpone.c
+++ b/postpone.c
@@ -223,20 +223,15 @@ static struct Email *select_msg(void)
 /* args:
  *      ctx        Context info, used when recalling a message to which
  *              we reply.
- *        hdr        envelope/attachment info for recalled message
- *        cur        if message was a reply, `cur' is set to the message which
- *                `hdr' is in reply to
- *        fcc        fcc for the recalled message
+ *      sctx    Send Context info.
  *
  * return vals:
  *        -1                error/no messages
  *        0                normal exit
- *        SEND_REPLY        recalled message is a reply
  */
-int mutt_get_postponed(struct Context *ctx, struct Email *hdr, struct Email **cur, struct Buffer *fcc)
+int mutt_get_postponed(struct Context *ctx, SEND_CONTEXT *sctx)
 {
   struct Email *h;
-  int code = SEND_POSTPONED;
   struct ListHead *tmp;
   struct ListHead *last = NULL;
   struct ListHead *next;
@@ -293,7 +288,7 @@ int mutt_get_postponed(struct Context *ctx, struct Email *hdr, struct Email **cur, struct Buffer *fcc)
     return (-1);
   }
 
-  if (mutt_prepare_template(NULL, PostContext, hdr, h, 0) < 0)
+  if (mutt_prepare_template(NULL, PostContext, sctx->msg, h, 0) < 0)
   {
     mx_fastclose_mailbox(PostContext);
     FREE(&PostContext);
@@ -319,7 +314,7 @@ int mutt_get_postponed(struct Context *ctx, struct Email *hdr, struct Email **cur, struct Buffer *fcc)
 
   FREE(&PostContext);
 
-  for (tmp = hdr->env->userhdrs; tmp; )
+  for (tmp = sctx->msg->env->userhdrs; tmp; )
   {
     if (mutt_str_strncasecmp("X-Mutt-References:", tmp->data, 18) == 0)
     {
@@ -330,7 +325,7 @@ int mutt_get_postponed(struct Context *ctx, struct Email *hdr, struct Email **cur, struct Buffer *fcc)
         p = mutt_str_skip_email_wsp(tmp->data + 18);
         if (!ctx->id_hash)
           ctx->id_hash = mutt_make_id_hash(ctx);
-        *cur = mutt_hash_find(ctx->id_hash, p);
+        sctx->cur = mutt_hash_find(ctx->id_hash, p);
       }
 
       /* Remove the X-Mutt-References: header field. */
@@ -338,25 +333,25 @@ int mutt_get_postponed(struct Context *ctx, struct Email *hdr, struct Email **cur, struct Buffer *fcc)
       if (last)
         last->next = tmp->next;
       else
-        hdr->env->userhdrs = tmp->next;
+        sctx->msg->env->userhdrs = tmp->next;
       tmp->next = NULL;
       mutt_free_list(&tmp);
       tmp = next;
-      if (*cur)
-        code |= SEND_REPLY;
+      if (sctx->cur)
+        sctx->flags |= SEND_REPLY;
     }
     else if (mutt_str_strncasecmp("X-Mutt-Fcc:", tmp->data, 11) == 0)
     {
       p = mutt_str_skip_email_wsp(tmp->data + 11);
-      mutt_buffer_strcpy(fcc, p);
-      mutt_buffer_pretty_mailbox(fcc);
+      mutt_buffer_strcpy(sctx->fcc, p);
+      mutt_buffer_pretty_mailbox(sctx->fcc);
 
       /* remove the X-Mutt-Fcc: header field */
       next = tmp->next;
       if (last)
         last->next = tmp->next;
       else
-        hdr->env->userhdrs = tmp->next;
+        sctx->msg->env->userhdrs = tmp->next;
       tmp->next = NULL;
       mutt_free_list(&tmp);
       tmp = next;
@@ -365,7 +360,7 @@ int mutt_get_postponed(struct Context *ctx, struct Email *hdr, struct Email **cur, struct Buffer *fcc)
        * user to not make a copy if the header field is present, but empty.
        * see http://dev.mutt.org/trac/ticket/3653
        */
-      code |= SEND_POSTPONED_FCC;
+      sctx->flags |= SEND_POSTPONED_FCC;
     }
     else if ((WithCrypto & APPLICATION_PGP)
              && (mutt_str_strncmp("Pgp:", tmp->data, 4) == 0 /* this is generated
@@ -373,16 +368,16 @@ int mutt_get_postponed(struct Context *ctx, struct Email *hdr, struct Email **cur, struct Buffer *fcc)
                                                            */
                  || mutt_str_strncmp("X-Mutt-PGP:", tmp->data, 11) == 0))
     {
-      hdr->security = mutt_parse_crypt_hdr(strchr(tmp->data, ':') + 1, 1,
-                                            APPLICATION_PGP);
-      hdr->security |= APPLICATION_PGP;
+      sctx->msg->security = mutt_parse_crypt_hdr(strchr(tmp->data, ':') + 1, 1,
+                                                  APPLICATION_PGP);
+      sctx->msg->security |= APPLICATION_PGP;
 
       /* remove the pgp field */
       next = tmp->next;
       if (last)
         last->next = tmp->next;
       else
-        hdr->env->userhdrs = tmp->next;
+        sctx->msg->env->userhdrs = tmp->next;
       tmp->next = NULL;
       mutt_free_list(&tmp);
       tmp = next;
@@ -390,16 +385,16 @@ int mutt_get_postponed(struct Context *ctx, struct Email *hdr, struct Email **cur, struct Buffer *fcc)
     else if ((WithCrypto & APPLICATION_SMIME)
              && mutt_str_strncmp("X-Mutt-SMIME:", tmp->data, 13) == 0)
     {
-      hdr->security = mutt_parse_crypt_hdr(strchr(tmp->data, ':') + 1, 1,
-                                            APPLICATION_SMIME);
-      hdr->security |= APPLICATION_SMIME;
+      sctx->msg->security = mutt_parse_crypt_hdr(strchr(tmp->data, ':') + 1, 1,
+                                                  APPLICATION_SMIME);
+      sctx->msg->security |= APPLICATION_SMIME;
 
       /* remove the smime field */
       next = tmp->next;
       if (last)
         last->next = tmp->next;
       else
-        hdr->env->userhdrs = tmp->next;
+        sctx->msg->env->userhdrs = tmp->next;
       tmp->next = NULL;
       mutt_free_list(&tmp);
       tmp = next;
@@ -409,12 +404,12 @@ int mutt_get_postponed(struct Context *ctx, struct Email *hdr, struct Email **cur, struct Buffer *fcc)
     else if (mutt_str_strncmp("X-Mutt-Mix:", tmp->data, 11) == 0)
     {
       char *t;
-      mutt_free_list(&hdr->chain);
+      mutt_free_list(&sctx->msg->chain);
 
       t = strtok(tmp->data + 11, " \t\n");
       while (t)
       {
-        hdr->chain = mutt_add_list(hdr->chain, t);
+        sctx->msg->chain = mutt_add_list(sctx->msg->chain, t);
         t = strtok(NULL, " \t\n");
       }
 
@@ -422,7 +417,7 @@ int mutt_get_postponed(struct Context *ctx, struct Email *hdr, struct Email **cur, struct Buffer *fcc)
       if (last)
         last->next = tmp->next;
       else
-        hdr->env->userhdrs = tmp->next;
+        sctx->msg->env->userhdrs = tmp->next;
       tmp->next = NULL;
       mutt_free_list(&tmp);
       tmp = next;
@@ -437,9 +432,9 @@ int mutt_get_postponed(struct Context *ctx, struct Email *hdr, struct Email **cur, struct Buffer *fcc)
   }
 
   if (option(C_CryptOpportunisticEncrypt))
-    crypt_opportunistic_encrypt(hdr);
+    crypt_opportunistic_encrypt(sctx->msg);
 
-  return (code);
+  return (0);
 }
 
 
diff --git a/protos.h b/protos.h
index c8c79428..2dc556e4 100644
--- a/protos.h
+++ b/protos.h
@@ -331,7 +331,7 @@ int _mutt_buffer_get_field(const char *, struct Buffer *, int, int, char ***, int *);
 int mutt_get_hook_type(const char *);
 int mutt_get_field_unbuffered(char *, char *, size_t, int);
 #define mutt_get_password(A,B,C) mutt_get_field_unbuffered(A,B,C,MUTT_PASS)
-int mutt_get_postponed(struct Context *, struct Email *, struct Email **, struct Buffer *);
+int mutt_get_postponed(struct Context *, SEND_CONTEXT *);
 int mutt_get_tmp_attachment(struct Body *);
 int mutt_index_menu(void);
 int mutt_invoke_sendmail(struct Address *, struct Address *, struct Address *, struct Address *, const char *, int);
@@ -384,7 +384,7 @@ int mutt_smtp_send(const struct Address *, const struct Address *, const struct Address *,
 size_t mutt_wstr_trunc(const char *, size_t, size_t, size_t *);
 int mutt_mb_charlen(const char *s, int *);
 int mutt_strwidth(const char *);
-int mutt_compose_menu(struct Email *, struct Buffer *, struct Email *, int);
+int mutt_compose_menu(SEND_CONTEXT *);
 int mutt_thread_set_flag(struct Email *, int, int, int);
 int user_is_recipient(struct Email *);
 void mutt_update_num_postponed(void);
diff --git a/send.c b/send.c
index 475c8000..82d2e2ba 100644
--- a/send.c
+++ b/send.c
@@ -1637,7 +1637,7 @@ static int send_message_setup(SEND_CONTEXT *sctx, const char *tempfile,
   int killfrom = 0;
   struct Body *pbody;
   char *ctype;
-  char buffer[1024];
+  struct Buffer *tmpbuffer;
 
   if (!sctx->flags && !sctx->msg && quadoption(C_Recall) != MUTT_NO &&
       mutt_num_postponed(1))
@@ -1676,11 +1676,8 @@ static int send_message_setup(SEND_CONTEXT *sctx, const char *tempfile,
 
     if (sctx->flags == SEND_POSTPONED)
     {
-      int tmpflags;
-
-      if ((tmpflags = mutt_get_postponed(ctx, sctx->msg, &sctx->cur, sctx->fcc)) < 0)
+      if (mutt_get_postponed(ctx, sctx) < 0)
         goto cleanup;
-      sctx->flags |= tmpflags;
     }
 
     if (sctx->flags & (SEND_POSTPONED|SEND_RESEND))
@@ -1727,9 +1724,11 @@ static int send_message_setup(SEND_CONTEXT *sctx, const char *tempfile,
 
       if (!tempfile)
       {
-        mutt_mktemp(buffer, sizeof(buffer));
-        tempfp = mutt_file_fopen(buffer, "w+");
-        sctx->msg->content->filename = mutt_str_strdup(buffer);
+        tmpbuffer = mutt_buffer_pool_get();
+        mutt_buffer_mktemp(tmpbuffer);
+        tempfp = mutt_file_fopen(mutt_b2s(tmpbuffer), "w+");
+        sctx->msg->content->filename = mutt_str_strdup(mutt_b2s(tmpbuffer));
+        mutt_buffer_pool_release(&tmpbuffer);
       }
       else
       {
@@ -2130,8 +2129,7 @@ static int send_message_resume_compose_menu(SEND_CONTEXT *sctx)
 main_loop:
 
     mutt_buffer_pretty_mailbox(sctx->fcc);
-    i = mutt_compose_menu(sctx->msg, sctx->fcc, sctx->cur,
-                          (sctx->flags & SEND_NO_FREE_HEADER ? MUTT_COMPOSE_NOFREEHEADER : 0));
+    i = mutt_compose_menu(sctx);
     if (i == -1)
     {
       /* abort */
diff --git a/send.h b/send.h
index 0b51c74b..f5d03c9c 100644
--- a/send.h
+++ b/send.h
@@ -52,5 +52,6 @@ struct Address *mutt_default_from(void);
 void mutt_encode_descriptions(struct Body *, short);
 int mutt_resend_message(FILE *, struct Context *, struct Email *);
 int mutt_send_message(int, struct Email *, const char *, struct Context *, struct Email *);
+int mutt_send_message_resume(SEND_CONTEXT *sctx);
 
 #endif
